// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/sso"
	auth "github.com/telia-oss/aws-auth"
)

type FakeSSOAPI struct {
	GetRoleCredentialsRequestStub        func(*sso.GetRoleCredentialsInput) sso.GetRoleCredentialsRequest
	getRoleCredentialsRequestMutex       sync.RWMutex
	getRoleCredentialsRequestArgsForCall []struct {
		arg1 *sso.GetRoleCredentialsInput
	}
	getRoleCredentialsRequestReturns struct {
		result1 sso.GetRoleCredentialsRequest
	}
	getRoleCredentialsRequestReturnsOnCall map[int]struct {
		result1 sso.GetRoleCredentialsRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequest(arg1 *sso.GetRoleCredentialsInput) sso.GetRoleCredentialsRequest {
	fake.getRoleCredentialsRequestMutex.Lock()
	ret, specificReturn := fake.getRoleCredentialsRequestReturnsOnCall[len(fake.getRoleCredentialsRequestArgsForCall)]
	fake.getRoleCredentialsRequestArgsForCall = append(fake.getRoleCredentialsRequestArgsForCall, struct {
		arg1 *sso.GetRoleCredentialsInput
	}{arg1})
	fake.recordInvocation("GetRoleCredentialsRequest", []interface{}{arg1})
	fake.getRoleCredentialsRequestMutex.Unlock()
	if fake.GetRoleCredentialsRequestStub != nil {
		return fake.GetRoleCredentialsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getRoleCredentialsRequestReturns
	return fakeReturns.result1
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequestCallCount() int {
	fake.getRoleCredentialsRequestMutex.RLock()
	defer fake.getRoleCredentialsRequestMutex.RUnlock()
	return len(fake.getRoleCredentialsRequestArgsForCall)
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequestCalls(stub func(*sso.GetRoleCredentialsInput) sso.GetRoleCredentialsRequest) {
	fake.getRoleCredentialsRequestMutex.Lock()
	defer fake.getRoleCredentialsRequestMutex.Unlock()
	fake.GetRoleCredentialsRequestStub = stub
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequestArgsForCall(i int) *sso.GetRoleCredentialsInput {
	fake.getRoleCredentialsRequestMutex.RLock()
	defer fake.getRoleCredentialsRequestMutex.RUnlock()
	argsForCall := fake.getRoleCredentialsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequestReturns(result1 sso.GetRoleCredentialsRequest) {
	fake.getRoleCredentialsRequestMutex.Lock()
	defer fake.getRoleCredentialsRequestMutex.Unlock()
	fake.GetRoleCredentialsRequestStub = nil
	fake.getRoleCredentialsRequestReturns = struct {
		result1 sso.GetRoleCredentialsRequest
	}{result1}
}

func (fake *FakeSSOAPI) GetRoleCredentialsRequestReturnsOnCall(i int, result1 sso.GetRoleCredentialsRequest) {
	fake.getRoleCredentialsRequestMutex.Lock()
	defer fake.getRoleCredentialsRequestMutex.Unlock()
	fake.GetRoleCredentialsRequestStub = nil
	if fake.getRoleCredentialsRequestReturnsOnCall == nil {
		fake.getRoleCredentialsRequestReturnsOnCall = make(map[int]struct {
			result1 sso.GetRoleCredentialsRequest
		})
	}
	fake.getRoleCredentialsRequestReturnsOnCall[i] = struct {
		result1 sso.GetRoleCredentialsRequest
	}{result1}
}

func (fake *FakeSSOAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRoleCredentialsRequestMutex.RLock()
	defer fake.getRoleCredentialsRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSOAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.SSOAPI = new(FakeSSOAPI)
