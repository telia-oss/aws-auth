// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/ssooidc"
	auth "github.com/telia-oss/aws-auth"
)

type FakeOIDCAPI struct {
	CreateTokenRequestStub        func(*ssooidc.CreateTokenInput) ssooidc.CreateTokenRequest
	createTokenRequestMutex       sync.RWMutex
	createTokenRequestArgsForCall []struct {
		arg1 *ssooidc.CreateTokenInput
	}
	createTokenRequestReturns struct {
		result1 ssooidc.CreateTokenRequest
	}
	createTokenRequestReturnsOnCall map[int]struct {
		result1 ssooidc.CreateTokenRequest
	}
	RegisterClientRequestStub        func(*ssooidc.RegisterClientInput) ssooidc.RegisterClientRequest
	registerClientRequestMutex       sync.RWMutex
	registerClientRequestArgsForCall []struct {
		arg1 *ssooidc.RegisterClientInput
	}
	registerClientRequestReturns struct {
		result1 ssooidc.RegisterClientRequest
	}
	registerClientRequestReturnsOnCall map[int]struct {
		result1 ssooidc.RegisterClientRequest
	}
	StartDeviceAuthorizationRequestStub        func(*ssooidc.StartDeviceAuthorizationInput) ssooidc.StartDeviceAuthorizationRequest
	startDeviceAuthorizationRequestMutex       sync.RWMutex
	startDeviceAuthorizationRequestArgsForCall []struct {
		arg1 *ssooidc.StartDeviceAuthorizationInput
	}
	startDeviceAuthorizationRequestReturns struct {
		result1 ssooidc.StartDeviceAuthorizationRequest
	}
	startDeviceAuthorizationRequestReturnsOnCall map[int]struct {
		result1 ssooidc.StartDeviceAuthorizationRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOIDCAPI) CreateTokenRequest(arg1 *ssooidc.CreateTokenInput) ssooidc.CreateTokenRequest {
	fake.createTokenRequestMutex.Lock()
	ret, specificReturn := fake.createTokenRequestReturnsOnCall[len(fake.createTokenRequestArgsForCall)]
	fake.createTokenRequestArgsForCall = append(fake.createTokenRequestArgsForCall, struct {
		arg1 *ssooidc.CreateTokenInput
	}{arg1})
	fake.recordInvocation("CreateTokenRequest", []interface{}{arg1})
	fake.createTokenRequestMutex.Unlock()
	if fake.CreateTokenRequestStub != nil {
		return fake.CreateTokenRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createTokenRequestReturns
	return fakeReturns.result1
}

func (fake *FakeOIDCAPI) CreateTokenRequestCallCount() int {
	fake.createTokenRequestMutex.RLock()
	defer fake.createTokenRequestMutex.RUnlock()
	return len(fake.createTokenRequestArgsForCall)
}

func (fake *FakeOIDCAPI) CreateTokenRequestCalls(stub func(*ssooidc.CreateTokenInput) ssooidc.CreateTokenRequest) {
	fake.createTokenRequestMutex.Lock()
	defer fake.createTokenRequestMutex.Unlock()
	fake.CreateTokenRequestStub = stub
}

func (fake *FakeOIDCAPI) CreateTokenRequestArgsForCall(i int) *ssooidc.CreateTokenInput {
	fake.createTokenRequestMutex.RLock()
	defer fake.createTokenRequestMutex.RUnlock()
	argsForCall := fake.createTokenRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOIDCAPI) CreateTokenRequestReturns(result1 ssooidc.CreateTokenRequest) {
	fake.createTokenRequestMutex.Lock()
	defer fake.createTokenRequestMutex.Unlock()
	fake.CreateTokenRequestStub = nil
	fake.createTokenRequestReturns = struct {
		result1 ssooidc.CreateTokenRequest
	}{result1}
}

func (fake *FakeOIDCAPI) CreateTokenRequestReturnsOnCall(i int, result1 ssooidc.CreateTokenRequest) {
	fake.createTokenRequestMutex.Lock()
	defer fake.createTokenRequestMutex.Unlock()
	fake.CreateTokenRequestStub = nil
	if fake.createTokenRequestReturnsOnCall == nil {
		fake.createTokenRequestReturnsOnCall = make(map[int]struct {
			result1 ssooidc.CreateTokenRequest
		})
	}
	fake.createTokenRequestReturnsOnCall[i] = struct {
		result1 ssooidc.CreateTokenRequest
	}{result1}
}

func (fake *FakeOIDCAPI) RegisterClientRequest(arg1 *ssooidc.RegisterClientInput) ssooidc.RegisterClientRequest {
	fake.registerClientRequestMutex.Lock()
	ret, specificReturn := fake.registerClientRequestReturnsOnCall[len(fake.registerClientRequestArgsForCall)]
	fake.registerClientRequestArgsForCall = append(fake.registerClientRequestArgsForCall, struct {
		arg1 *ssooidc.RegisterClientInput
	}{arg1})
	fake.recordInvocation("RegisterClientRequest", []interface{}{arg1})
	fake.registerClientRequestMutex.Unlock()
	if fake.RegisterClientRequestStub != nil {
		return fake.RegisterClientRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.registerClientRequestReturns
	return fakeReturns.result1
}

func (fake *FakeOIDCAPI) RegisterClientRequestCallCount() int {
	fake.registerClientRequestMutex.RLock()
	defer fake.registerClientRequestMutex.RUnlock()
	return len(fake.registerClientRequestArgsForCall)
}

func (fake *FakeOIDCAPI) RegisterClientRequestCalls(stub func(*ssooidc.RegisterClientInput) ssooidc.RegisterClientRequest) {
	fake.registerClientRequestMutex.Lock()
	defer fake.registerClientRequestMutex.Unlock()
	fake.RegisterClientRequestStub = stub
}

func (fake *FakeOIDCAPI) RegisterClientRequestArgsForCall(i int) *ssooidc.RegisterClientInput {
	fake.registerClientRequestMutex.RLock()
	defer fake.registerClientRequestMutex.RUnlock()
	argsForCall := fake.registerClientRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOIDCAPI) RegisterClientRequestReturns(result1 ssooidc.RegisterClientRequest) {
	fake.registerClientRequestMutex.Lock()
	defer fake.registerClientRequestMutex.Unlock()
	fake.RegisterClientRequestStub = nil
	fake.registerClientRequestReturns = struct {
		result1 ssooidc.RegisterClientRequest
	}{result1}
}

func (fake *FakeOIDCAPI) RegisterClientRequestReturnsOnCall(i int, result1 ssooidc.RegisterClientRequest) {
	fake.registerClientRequestMutex.Lock()
	defer fake.registerClientRequestMutex.Unlock()
	fake.RegisterClientRequestStub = nil
	if fake.registerClientRequestReturnsOnCall == nil {
		fake.registerClientRequestReturnsOnCall = make(map[int]struct {
			result1 ssooidc.RegisterClientRequest
		})
	}
	fake.registerClientRequestReturnsOnCall[i] = struct {
		result1 ssooidc.RegisterClientRequest
	}{result1}
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequest(arg1 *ssooidc.StartDeviceAuthorizationInput) ssooidc.StartDeviceAuthorizationRequest {
	fake.startDeviceAuthorizationRequestMutex.Lock()
	ret, specificReturn := fake.startDeviceAuthorizationRequestReturnsOnCall[len(fake.startDeviceAuthorizationRequestArgsForCall)]
	fake.startDeviceAuthorizationRequestArgsForCall = append(fake.startDeviceAuthorizationRequestArgsForCall, struct {
		arg1 *ssooidc.StartDeviceAuthorizationInput
	}{arg1})
	fake.recordInvocation("StartDeviceAuthorizationRequest", []interface{}{arg1})
	fake.startDeviceAuthorizationRequestMutex.Unlock()
	if fake.StartDeviceAuthorizationRequestStub != nil {
		return fake.StartDeviceAuthorizationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.startDeviceAuthorizationRequestReturns
	return fakeReturns.result1
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequestCallCount() int {
	fake.startDeviceAuthorizationRequestMutex.RLock()
	defer fake.startDeviceAuthorizationRequestMutex.RUnlock()
	return len(fake.startDeviceAuthorizationRequestArgsForCall)
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequestCalls(stub func(*ssooidc.StartDeviceAuthorizationInput) ssooidc.StartDeviceAuthorizationRequest) {
	fake.startDeviceAuthorizationRequestMutex.Lock()
	defer fake.startDeviceAuthorizationRequestMutex.Unlock()
	fake.StartDeviceAuthorizationRequestStub = stub
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequestArgsForCall(i int) *ssooidc.StartDeviceAuthorizationInput {
	fake.startDeviceAuthorizationRequestMutex.RLock()
	defer fake.startDeviceAuthorizationRequestMutex.RUnlock()
	argsForCall := fake.startDeviceAuthorizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequestReturns(result1 ssooidc.StartDeviceAuthorizationRequest) {
	fake.startDeviceAuthorizationRequestMutex.Lock()
	defer fake.startDeviceAuthorizationRequestMutex.Unlock()
	fake.StartDeviceAuthorizationRequestStub = nil
	fake.startDeviceAuthorizationRequestReturns = struct {
		result1 ssooidc.StartDeviceAuthorizationRequest
	}{result1}
}

func (fake *FakeOIDCAPI) StartDeviceAuthorizationRequestReturnsOnCall(i int, result1 ssooidc.StartDeviceAuthorizationRequest) {
	fake.startDeviceAuthorizationRequestMutex.Lock()
	defer fake.startDeviceAuthorizationRequestMutex.Unlock()
	fake.StartDeviceAuthorizationRequestStub = nil
	if fake.startDeviceAuthorizationRequestReturnsOnCall == nil {
		fake.startDeviceAuthorizationRequestReturnsOnCall = make(map[int]struct {
			result1 ssooidc.StartDeviceAuthorizationRequest
		})
	}
	fake.startDeviceAuthorizationRequestReturnsOnCall[i] = struct {
		result1 ssooidc.StartDeviceAuthorizationRequest
	}{result1}
}

func (fake *FakeOIDCAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTokenRequestMutex.RLock()
	defer fake.createTokenRequestMutex.RUnlock()
	fake.registerClientRequestMutex.RLock()
	defer fake.registerClientRequestMutex.RUnlock()
	fake.startDeviceAuthorizationRequestMutex.RLock()
	defer fake.startDeviceAuthorizationRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOIDCAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.OIDCAPI = new(FakeOIDCAPI)
